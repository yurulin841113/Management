// Licence file C:\Users\user\OneDrive\Documents\ReversePOCO.txt not found.
// Please obtain your licence file at www.ReversePOCO.co.uk, and place it in your documents folder shown above.
// Defaulting to Trial version.
// <auto-generated>
// ReSharper disable All

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data;
using System.Data.Common;
using System.Data.Entity;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.Infrastructure.Annotations;
using System.Data.Entity.Infrastructure.Interception;
using System.Data.Entity.ModelConfiguration;
using System.Data.Entity.Spatial;
using System.Data.Entity.Validation;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;

namespace SchoolManagement.Models
{
    #region Database context interface

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public interface ISchoolCSDbContext : IDisposable
    {
        DbSet<Class> Classes { get; set; } // Class
        DbSet<Exam> Exams { get; set; } // Exam
        DbSet<Expense> Expenses { get; set; } // Expense
        DbSet<Fee> Fees { get; set; } // Fees
        DbSet<Student> Students { get; set; } // Student
        DbSet<StudentAttendence> StudentAttendences { get; set; } // StudentAttendence
        DbSet<Subject> Subjects { get; set; } // Subject
        DbSet<Teacher> Teachers { get; set; } // Teacher
        DbSet<TeacherAttendence> TeacherAttendences { get; set; } // TeacherAttendence
        DbSet<TeacherSubject> TeacherSubjects { get; set; } // TeacherSubject

        int SaveChanges();
        Task<int> SaveChangesAsync();
        Task<int> SaveChangesAsync(CancellationToken cancellationToken);
        DbChangeTracker ChangeTracker { get; }
        DbContextConfiguration Configuration { get; }
        Database Database { get; }
        DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        DbEntityEntry Entry(object entity);
        IEnumerable<DbEntityValidationResult> GetValidationErrors();
        DbSet Set(Type entityType);
        DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();
    }

    #endregion

    #region Database context

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class SchoolCSDbContext : DbContext, ISchoolCSDbContext
    {
        public DbSet<Class> Classes { get; set; } // Class
        public DbSet<Exam> Exams { get; set; } // Exam
        public DbSet<Expense> Expenses { get; set; } // Expense
        public DbSet<Fee> Fees { get; set; } // Fees
        public DbSet<Student> Students { get; set; } // Student
        public DbSet<StudentAttendence> StudentAttendences { get; set; } // StudentAttendence
        public DbSet<Subject> Subjects { get; set; } // Subject
        public DbSet<Teacher> Teachers { get; set; } // Teacher
        public DbSet<TeacherAttendence> TeacherAttendences { get; set; } // TeacherAttendence
        public DbSet<TeacherSubject> TeacherSubjects { get; set; } // TeacherSubject

        static SchoolCSDbContext()
        {
            System.Data.Entity.Database.SetInitializer<SchoolCSDbContext>(null);
        }

        /// <inheritdoc />
        public SchoolCSDbContext()
            : base("Name=SchoolCSDbContext")
        {
        }

        /// <inheritdoc />
        public SchoolCSDbContext(string connectionString)
            : base(connectionString)
        {
        }

        /// <inheritdoc />
        public SchoolCSDbContext(string connectionString, DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        /// <inheritdoc />
        public SchoolCSDbContext(DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        /// <inheritdoc />
        public SchoolCSDbContext(DbConnection existingConnection, DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        /// <inheritdoc />
        public SchoolCSDbContext(ObjectContext objectContext, bool dbContextOwnsObjectContext)
            : base(objectContext, dbContextOwnsObjectContext)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new ClassConfiguration());
            modelBuilder.Configurations.Add(new ExamConfiguration());
            modelBuilder.Configurations.Add(new ExpenseConfiguration());
            modelBuilder.Configurations.Add(new FeeConfiguration());
            modelBuilder.Configurations.Add(new StudentConfiguration());
            modelBuilder.Configurations.Add(new StudentAttendenceConfiguration());
            modelBuilder.Configurations.Add(new SubjectConfiguration());
            modelBuilder.Configurations.Add(new TeacherConfiguration());
            modelBuilder.Configurations.Add(new TeacherAttendenceConfiguration());
            modelBuilder.Configurations.Add(new TeacherSubjectConfiguration());
        }

        public static DbModelBuilder CreateModel(DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new ClassConfiguration(schema));
            modelBuilder.Configurations.Add(new ExamConfiguration(schema));
            modelBuilder.Configurations.Add(new ExpenseConfiguration(schema));
            modelBuilder.Configurations.Add(new FeeConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentAttendenceConfiguration(schema));
            modelBuilder.Configurations.Add(new SubjectConfiguration(schema));
            modelBuilder.Configurations.Add(new TeacherConfiguration(schema));
            modelBuilder.Configurations.Add(new TeacherAttendenceConfiguration(schema));
            modelBuilder.Configurations.Add(new TeacherSubjectConfiguration(schema));

            return modelBuilder;
        }
    }

    #endregion

    #region Database context factory

    public class SchoolCSDbContextFactory : IDbContextFactory<SchoolCSDbContext>
    {
        public SchoolCSDbContext Create()
        {
            return new SchoolCSDbContext();
        }
    }

    #endregion

    #region Fake Database context

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class FakeSchoolCSDbContext : ISchoolCSDbContext
    {
        public DbSet<Class> Classes { get; set; } // Class
        public DbSet<Exam> Exams { get; set; } // Exam
        public DbSet<Expense> Expenses { get; set; } // Expense
        public DbSet<Fee> Fees { get; set; } // Fees
        public DbSet<Student> Students { get; set; } // Student
        public DbSet<StudentAttendence> StudentAttendences { get; set; } // StudentAttendence
        public DbSet<Subject> Subjects { get; set; } // Subject
        public DbSet<Teacher> Teachers { get; set; } // Teacher
        public DbSet<TeacherAttendence> TeacherAttendences { get; set; } // TeacherAttendence
        public DbSet<TeacherSubject> TeacherSubjects { get; set; } // TeacherSubject

        public FakeSchoolCSDbContext()
        {
            _changeTracker = null;
            _configuration = null;
            _database = null;

            Classes = new FakeDbSet<Class>("ClassId");
            Exams = new FakeDbSet<Exam>("ExamId");
            Expenses = new FakeDbSet<Expense>("ExpenseId");
            Fees = new FakeDbSet<Fee>("FeesId");
            Students = new FakeDbSet<Student>("StudentId");
            StudentAttendences = new FakeDbSet<StudentAttendence>("Id");
            Subjects = new FakeDbSet<Subject>("SubjectId");
            Teachers = new FakeDbSet<Teacher>("TeacherId");
            TeacherAttendences = new FakeDbSet<TeacherAttendence>("Id");
            TeacherSubjects = new FakeDbSet<TeacherSubject>("Id");

        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(() => 1);
        }

        public Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private DbChangeTracker _changeTracker;

        public DbChangeTracker ChangeTracker { get { return _changeTracker; } }

        private DbContextConfiguration _configuration;

        public DbContextConfiguration Configuration { get { return _configuration; } }

        private Database _database;

        public Database Database { get { return _database; } }

        public DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public DbEntityEntry Entry(object entity)
        {
            throw new NotImplementedException();
        }

        public IEnumerable<DbEntityValidationResult> GetValidationErrors()
        {
            throw new NotImplementedException();
        }

        public DbSet Set(Type entityType)
        {
            throw new NotImplementedException();
        }

        public DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new NotImplementedException();
        }

        public override string ToString()
        {
            throw new NotImplementedException();
        }
    }

    #endregion

    #region Fake DbSet

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    public class FakeDbSet<TEntity> : DbSet<TEntity>, IQueryable, IEnumerable<TEntity>, IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly PropertyInfo[] _primaryKeys;
        private readonly ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override Task<TEntity> FindAsync(CancellationToken cancellationToken, params object[] keyValues)
        {
            return Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override Task<TEntity> FindAsync(params object[] keyValues)
        {
            return Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override IEnumerable<TEntity> AddRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override IEnumerable<TEntity> RemoveRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return Activator.CreateInstance<TDerivedEntity>();
        }

        public override ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IDbAsyncEnumerator<TEntity> IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
    }

    public class FakeDbAsyncQueryProvider<TEntity> : IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(Expression expression)
        {
            var m = expression as MethodCallExpression;
            if (m != null)
            {
                var resultType = m.Method.ReturnType; // it should be IQueryable<T>
                var tElement = resultType.GetGenericArguments()[0];
                var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(tElement);
                return (IQueryable) Activator.CreateInstance(queryType, expression);
            }
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(Expression expression)
        {
            var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(typeof(TElement));
            return (IQueryable<TElement>) Activator.CreateInstance(queryType, expression);
        }

        public object Execute(Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public Task<object> ExecuteAsync(Expression expression, CancellationToken cancellationToken)
        {
            return Task.FromResult(Execute(expression));
        }

        public Task<TResult> ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken)
        {
            return Task.FromResult(Execute<TResult>(expression));
        }
    }

    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(Expression expression)
            : base(expression)
        { }

        public IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        IDbAsyncEnumerator IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }

    }

    public class FakeDbAsyncEnumerator<T> : IDbAsyncEnumerator<T>
    {
        private readonly IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public Task<bool> MoveNextAsync(CancellationToken cancellationToken)
        {
            return Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // Class
    public class Class
    {
        public int ClassId { get; set; } // ClassId (Primary key)
        public string ClassName { get; set; } // ClassName (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child Exams where [Exam].[ClassId] point to this entity (FK_Exam_Class)
        /// </summary>
        public ICollection<Exam> Exams { get; set; } // Exam.FK_Exam_Class

        /// <summary>
        /// Child Expenses where [Expense].[ClassId] point to this entity (FK_Expense_Class)
        /// </summary>
        public ICollection<Expense> Expenses { get; set; } // Expense.FK_Expense_Class

        /// <summary>
        /// Child Fees where [Fees].[ClassId] point to this entity (FK_Fees_Class)
        /// </summary>
        public ICollection<Fee> Fees { get; set; } // Fees.FK_Fees_Class

        /// <summary>
        /// Child Students where [Student].[ClassId] point to this entity (FK_Student_Class)
        /// </summary>
        public ICollection<Student> Students { get; set; } // Student.FK_Student_Class

        /// <summary>
        /// Child StudentAttendences where [StudentAttendence].[ClassId] point to this entity (FK_StudentAttendence_Class)
        /// </summary>
        public ICollection<StudentAttendence> StudentAttendences { get; set; } // StudentAttendence.FK_StudentAttendence_Class

        /// <summary>
        /// Child Subjects where [Subject].[ClassId] point to this entity (FK__Subject__ClassId__267ABA7A)
        /// </summary>
        public ICollection<Subject> Subjects { get; set; } // Subject.FK__Subject__ClassId__267ABA7A

        /// <summary>
        /// Child TeacherSubjects where [TeacherSubject].[ClassId] point to this entity (FK_TeacherSubject_Class)
        /// </summary>
        public ICollection<TeacherSubject> TeacherSubjects { get; set; } // TeacherSubject.FK_TeacherSubject_Class

        public Class()
        {
            Exams = new List<Exam>();
            Expenses = new List<Expense>();
            Fees = new List<Fee>();
            Students = new List<Student>();
            StudentAttendences = new List<StudentAttendence>();
            Subjects = new List<Subject>();
            TeacherSubjects = new List<TeacherSubject>();
        }
    }

    // Exam
    public class Exam
    {
        public int ExamId { get; set; } // ExamId (Primary key)
        public int? ClassId { get; set; } // ClassId
        public int? SubjectId { get; set; } // SubjectId
        public string RollNo { get; set; } // RollNo (length: 20)
        public int? TotalMarks { get; set; } // TotalMarks
        public int? OutOfMarks { get; set; } // OutOfMarks

        // Foreign keys

        /// <summary>
        /// Parent Class pointed by [Exam].([ClassId]) (FK_Exam_Class)
        /// </summary>
        public Class Class { get; set; } // FK_Exam_Class

        /// <summary>
        /// Parent Subject pointed by [Exam].([SubjectId]) (FK_Exam_Subject)
        /// </summary>
        public Subject Subject { get; set; } // FK_Exam_Subject
    }

    // Expense
    public class Expense
    {
        public int ExpenseId { get; set; } // ExpenseId (Primary key)
        public int? ClassId { get; set; } // ClassId
        public int? SubjectId { get; set; } // SubjectId
        public int? ChargeAmount { get; set; } // ChargeAmount

        // Foreign keys

        /// <summary>
        /// Parent Class pointed by [Expense].([ClassId]) (FK_Expense_Class)
        /// </summary>
        public Class Class { get; set; } // FK_Expense_Class

        /// <summary>
        /// Parent Subject pointed by [Expense].([SubjectId]) (FK_Expense_Subject)
        /// </summary>
        public Subject Subject { get; set; } // FK_Expense_Subject
    }

    // Fees
    public class Fee
    {
        public int FeesId { get; set; } // FeesId (Primary key)
        public int? ClassId { get; set; } // ClassId
        public int? FeesAmount { get; set; } // FeesAmount

        // Foreign keys

        /// <summary>
        /// Parent Class pointed by [Fees].([ClassId]) (FK_Fees_Class)
        /// </summary>
        public Class Class { get; set; } // FK_Fees_Class
    }

    // Student
    public class Student
    {
        public int StudentId { get; set; } // StudentId (Primary key)
        public string Name { get; set; } // Name (length: 50)
        public DateTime? Dob { get; set; } // DOB
        public string Gender { get; set; } // Gender (length: 50)
        public long? Moblie { get; set; } // Moblie
        public string RollNo { get; set; } // RollNo (length: 50)
        public string Address { get; set; } // Address
        public int? ClassId { get; set; } // ClassId

        // Foreign keys

        /// <summary>
        /// Parent Class pointed by [Student].([ClassId]) (FK_Student_Class)
        /// </summary>
        public Class Class { get; set; } // FK_Student_Class
    }

    // StudentAttendence
    public class StudentAttendence
    {
        public int Id { get; set; } // Id (Primary key)
        public int? ClassId { get; set; } // ClassId
        public int? SubjectId { get; set; } // SubjectId
        public string RollNo { get; set; } // RollNo (length: 20)
        public bool? Status { get; set; } // Status
        public DateTime? Date { get; set; } // Date

        // Foreign keys

        /// <summary>
        /// Parent Class pointed by [StudentAttendence].([ClassId]) (FK_StudentAttendence_Class)
        /// </summary>
        public Class Class { get; set; } // FK_StudentAttendence_Class

        /// <summary>
        /// Parent Subject pointed by [StudentAttendence].([SubjectId]) (FK_StudentAttendence_Subject)
        /// </summary>
        public Subject Subject { get; set; } // FK_StudentAttendence_Subject
    }

    // Subject
    public class Subject
    {
        public int SubjectId { get; set; } // SubjectId (Primary key)
        public int? ClassId { get; set; } // ClassId
        public string SubjectName { get; set; } // SubjectName (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child Exams where [Exam].[SubjectId] point to this entity (FK_Exam_Subject)
        /// </summary>
        public ICollection<Exam> Exams { get; set; } // Exam.FK_Exam_Subject

        /// <summary>
        /// Child Expenses where [Expense].[SubjectId] point to this entity (FK_Expense_Subject)
        /// </summary>
        public ICollection<Expense> Expenses { get; set; } // Expense.FK_Expense_Subject

        /// <summary>
        /// Child StudentAttendences where [StudentAttendence].[SubjectId] point to this entity (FK_StudentAttendence_Subject)
        /// </summary>
        public ICollection<StudentAttendence> StudentAttendences { get; set; } // StudentAttendence.FK_StudentAttendence_Subject

        /// <summary>
        /// Child TeacherSubjects where [TeacherSubject].[SubjectId] point to this entity (FK_TeacherSubject_Subject)
        /// </summary>
        public ICollection<TeacherSubject> TeacherSubjects { get; set; } // TeacherSubject.FK_TeacherSubject_Subject

        // Foreign keys

        /// <summary>
        /// Parent Class pointed by [Subject].([ClassId]) (FK__Subject__ClassId__267ABA7A)
        /// </summary>
        public Class Class { get; set; } // FK__Subject__ClassId__267ABA7A

        public Subject()
        {
            Exams = new List<Exam>();
            Expenses = new List<Expense>();
            StudentAttendences = new List<StudentAttendence>();
            TeacherSubjects = new List<TeacherSubject>();
        }
    }

    // Teacher
    public class Teacher
    {
        public int TeacherId { get; set; } // TeacherId (Primary key)
        public string Name { get; set; } // Name (length: 50)
        public DateTime? Dob { get; set; } // DOB
        public string Gender { get; set; } // Gender (length: 50)
        public long? Moblie { get; set; } // Moblie
        public string Email { get; set; } // Email (length: 50)
        public string Address { get; set; } // Address
        public string Password { get; set; } // Password (length: 20)

        // Reverse navigation

        /// <summary>
        /// Child TeacherAttendences where [TeacherAttendence].[TeacherId] point to this entity (FK_TeacherAttendence_Teacher)
        /// </summary>
        public ICollection<TeacherAttendence> TeacherAttendences { get; set; } // TeacherAttendence.FK_TeacherAttendence_Teacher

        /// <summary>
        /// Child TeacherSubjects where [TeacherSubject].[TeacherId] point to this entity (FK_TeacherSubject_Teacher)
        /// </summary>
        public ICollection<TeacherSubject> TeacherSubjects { get; set; } // TeacherSubject.FK_TeacherSubject_Teacher

        public Teacher()
        {
            TeacherAttendences = new List<TeacherAttendence>();
            TeacherSubjects = new List<TeacherSubject>();
        }
    }

    // TeacherAttendence
    public class TeacherAttendence
    {
        public int Id { get; set; } // Id (Primary key)
        public int? TeacherId { get; set; } // TeacherId
        public bool? Status { get; set; } // Status
        public DateTime? Date { get; set; } // Date

        // Foreign keys

        /// <summary>
        /// Parent Teacher pointed by [TeacherAttendence].([TeacherId]) (FK_TeacherAttendence_Teacher)
        /// </summary>
        public Teacher Teacher { get; set; } // FK_TeacherAttendence_Teacher
    }

    // TeacherSubject
    public class TeacherSubject
    {
        public int Id { get; set; } // Id (Primary key)
        public int? ClassId { get; set; } // ClassId
        public int? SubjectId { get; set; } // SubjectId
        public int? TeacherId { get; set; } // TeacherId

        // Foreign keys

        /// <summary>
        /// Parent Class pointed by [TeacherSubject].([ClassId]) (FK_TeacherSubject_Class)
        /// </summary>
        public Class Class { get; set; } // FK_TeacherSubject_Class

        /// <summary>
        /// Parent Subject pointed by [TeacherSubject].([SubjectId]) (FK_TeacherSubject_Subject)
        /// </summary>
        public Subject Subject { get; set; } // FK_TeacherSubject_Subject

        /// <summary>
        /// Parent Teacher pointed by [TeacherSubject].([TeacherId]) (FK_TeacherSubject_Teacher)
        /// </summary>
        public Teacher Teacher { get; set; } // FK_TeacherSubject_Teacher
    }


    #endregion

    #region POCO Configuration

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // Class
    public class ClassConfiguration : EntityTypeConfiguration<Class>
    {
        public ClassConfiguration()
            : this("dbo")
        {
        }

        public ClassConfiguration(string schema)
        {
            ToTable("Class", schema);
            HasKey(x => x.ClassId);

            Property(x => x.ClassId).HasColumnName(@"ClassId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.ClassName).HasColumnName(@"ClassName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
        }
    }

    // Exam
    public class ExamConfiguration : EntityTypeConfiguration<Exam>
    {
        public ExamConfiguration()
            : this("dbo")
        {
        }

        public ExamConfiguration(string schema)
        {
            ToTable("Exam", schema);
            HasKey(x => x.ExamId);

            Property(x => x.ExamId).HasColumnName(@"ExamId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.ClassId).HasColumnName(@"ClassId").HasColumnType("int").IsOptional();
            Property(x => x.SubjectId).HasColumnName(@"SubjectId").HasColumnType("int").IsOptional();
            Property(x => x.RollNo).HasColumnName(@"RollNo").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(20);
            Property(x => x.TotalMarks).HasColumnName(@"TotalMarks").HasColumnType("int").IsOptional();
            Property(x => x.OutOfMarks).HasColumnName(@"OutOfMarks").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.Class).WithMany(b => b.Exams).HasForeignKey(c => c.ClassId).WillCascadeOnDelete(false); // FK_Exam_Class
            HasOptional(a => a.Subject).WithMany(b => b.Exams).HasForeignKey(c => c.SubjectId).WillCascadeOnDelete(false); // FK_Exam_Subject
        }
    }

    // Expense
    public class ExpenseConfiguration : EntityTypeConfiguration<Expense>
    {
        public ExpenseConfiguration()
            : this("dbo")
        {
        }

        public ExpenseConfiguration(string schema)
        {
            ToTable("Expense", schema);
            HasKey(x => x.ExpenseId);

            Property(x => x.ExpenseId).HasColumnName(@"ExpenseId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.ClassId).HasColumnName(@"ClassId").HasColumnType("int").IsOptional();
            Property(x => x.SubjectId).HasColumnName(@"SubjectId").HasColumnType("int").IsOptional();
            Property(x => x.ChargeAmount).HasColumnName(@"ChargeAmount").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.Class).WithMany(b => b.Expenses).HasForeignKey(c => c.ClassId).WillCascadeOnDelete(false); // FK_Expense_Class
            HasOptional(a => a.Subject).WithMany(b => b.Expenses).HasForeignKey(c => c.SubjectId).WillCascadeOnDelete(false); // FK_Expense_Subject
        }
    }

    // Fees
    public class FeeConfiguration : EntityTypeConfiguration<Fee>
    {
        public FeeConfiguration()
            : this("dbo")
        {
        }

        public FeeConfiguration(string schema)
        {
            ToTable("Fees", schema);
            HasKey(x => x.FeesId);

            Property(x => x.FeesId).HasColumnName(@"FeesId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.ClassId).HasColumnName(@"ClassId").HasColumnType("int").IsOptional();
            Property(x => x.FeesAmount).HasColumnName(@"FeesAmount").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.Class).WithMany(b => b.Fees).HasForeignKey(c => c.ClassId).WillCascadeOnDelete(false); // FK_Fees_Class
        }
    }

    // Student
    public class StudentConfiguration : EntityTypeConfiguration<Student>
    {
        public StudentConfiguration()
            : this("dbo")
        {
        }

        public StudentConfiguration(string schema)
        {
            ToTable("Student", schema);
            HasKey(x => x.StudentId);

            Property(x => x.StudentId).HasColumnName(@"StudentId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Dob).HasColumnName(@"DOB").HasColumnType("date").IsOptional();
            Property(x => x.Gender).HasColumnName(@"Gender").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Moblie).HasColumnName(@"Moblie").HasColumnType("bigint").IsOptional();
            Property(x => x.RollNo).HasColumnName(@"RollNo").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Address).HasColumnName(@"Address").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.ClassId).HasColumnName(@"ClassId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.Class).WithMany(b => b.Students).HasForeignKey(c => c.ClassId).WillCascadeOnDelete(false); // FK_Student_Class
        }
    }

    // StudentAttendence
    public class StudentAttendenceConfiguration : EntityTypeConfiguration<StudentAttendence>
    {
        public StudentAttendenceConfiguration()
            : this("dbo")
        {
        }

        public StudentAttendenceConfiguration(string schema)
        {
            ToTable("StudentAttendence", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.ClassId).HasColumnName(@"ClassId").HasColumnType("int").IsOptional();
            Property(x => x.SubjectId).HasColumnName(@"SubjectId").HasColumnType("int").IsOptional();
            Property(x => x.RollNo).HasColumnName(@"RollNo").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(20);
            Property(x => x.Status).HasColumnName(@"Status").HasColumnType("bit").IsOptional();
            Property(x => x.Date).HasColumnName(@"Date").HasColumnType("date").IsOptional();

            // Foreign keys
            HasOptional(a => a.Class).WithMany(b => b.StudentAttendences).HasForeignKey(c => c.ClassId).WillCascadeOnDelete(false); // FK_StudentAttendence_Class
            HasOptional(a => a.Subject).WithMany(b => b.StudentAttendences).HasForeignKey(c => c.SubjectId).WillCascadeOnDelete(false); // FK_StudentAttendence_Subject
        }
    }

    // Subject
    public class SubjectConfiguration : EntityTypeConfiguration<Subject>
    {
        public SubjectConfiguration()
            : this("dbo")
        {
        }

        public SubjectConfiguration(string schema)
        {
            ToTable("Subject", schema);
            HasKey(x => x.SubjectId);

            Property(x => x.SubjectId).HasColumnName(@"SubjectId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.ClassId).HasColumnName(@"ClassId").HasColumnType("int").IsOptional();
            Property(x => x.SubjectName).HasColumnName(@"SubjectName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);

            // Foreign keys
            HasOptional(a => a.Class).WithMany(b => b.Subjects).HasForeignKey(c => c.ClassId).WillCascadeOnDelete(false); // FK__Subject__ClassId__267ABA7A
        }
    }

    // Teacher
    public class TeacherConfiguration : EntityTypeConfiguration<Teacher>
    {
        public TeacherConfiguration()
            : this("dbo")
        {
        }

        public TeacherConfiguration(string schema)
        {
            ToTable("Teacher", schema);
            HasKey(x => x.TeacherId);

            Property(x => x.TeacherId).HasColumnName(@"TeacherId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Dob).HasColumnName(@"DOB").HasColumnType("date").IsOptional();
            Property(x => x.Gender).HasColumnName(@"Gender").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Moblie).HasColumnName(@"Moblie").HasColumnType("bigint").IsOptional();
            Property(x => x.Email).HasColumnName(@"Email").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Address).HasColumnName(@"Address").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.Password).HasColumnName(@"Password").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(20);
        }
    }

    // TeacherAttendence
    public class TeacherAttendenceConfiguration : EntityTypeConfiguration<TeacherAttendence>
    {
        public TeacherAttendenceConfiguration()
            : this("dbo")
        {
        }

        public TeacherAttendenceConfiguration(string schema)
        {
            ToTable("TeacherAttendence", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.TeacherId).HasColumnName(@"TeacherId").HasColumnType("int").IsOptional();
            Property(x => x.Status).HasColumnName(@"Status").HasColumnType("bit").IsOptional();
            Property(x => x.Date).HasColumnName(@"Date").HasColumnType("date").IsOptional();

            // Foreign keys
            HasOptional(a => a.Teacher).WithMany(b => b.TeacherAttendences).HasForeignKey(c => c.TeacherId).WillCascadeOnDelete(false); // FK_TeacherAttendence_Teacher
        }
    }

    // TeacherSubject
    public class TeacherSubjectConfiguration : EntityTypeConfiguration<TeacherSubject>
    {
        public TeacherSubjectConfiguration()
            : this("dbo")
        {
        }

        public TeacherSubjectConfiguration(string schema)
        {
            ToTable("TeacherSubject", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.ClassId).HasColumnName(@"ClassId").HasColumnType("int").IsOptional();
            Property(x => x.SubjectId).HasColumnName(@"SubjectId").HasColumnType("int").IsOptional();
            Property(x => x.TeacherId).HasColumnName(@"TeacherId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.Class).WithMany(b => b.TeacherSubjects).HasForeignKey(c => c.ClassId).WillCascadeOnDelete(false); // FK_TeacherSubject_Class
            HasOptional(a => a.Subject).WithMany(b => b.TeacherSubjects).HasForeignKey(c => c.SubjectId).WillCascadeOnDelete(false); // FK_TeacherSubject_Subject
            HasOptional(a => a.Teacher).WithMany(b => b.TeacherSubjects).HasForeignKey(c => c.TeacherId).WillCascadeOnDelete(false); // FK_TeacherSubject_Teacher
        }
    }


    #endregion

}
// </auto-generated>
